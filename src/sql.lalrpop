use super::ast;

grammar;

pub SqlStatement: ast::SqlStatement = {
    <statement: Statement> => ast::SqlStatement::Statement(statement),
    "EXPLAIN" ("QUERY" "PLAN")? <statement: Statement> => ast::SqlStatement::ExplainQueryPlan(statement),
};

Statement: ast::Statement = {
    SelectStatement => ast::Statement::SelectStatement(<>),
};

SelectStatement: ast::SelectStatement = {
    TableExpressions? SelectCoreList OrderByClause? LimitClause? => ast::SelectStatement{},
};

TableExpressions: () = {
    "WITH" "RECURSIVE"? CommonTableExpressionList,
};

CommonTableExpressionList: () = {
    CommonTableExpression,
    CommonTableExpressionList "," CommonTableExpression,
};

CommonTableExpression: () = {
    Identifier "AS" "(" SelectStatement ")",
    Identifier "(" IdentifierList ")" "AS" "(" SelectStatement ")",
};

SelectCoreList: () = {
    SelectCore,
    SelectCoreList CompoundOperator SelectCore,
};

CompoundOperator: () = {
    "UNION",
    "UNION" "ALL",
    "INTERSECT",
    "EXCEPT",
};

SelectCore: () = {
    "SELECT" SelectMode? ResultColumnList FromClause? WhereClause? GroupByClause?,
    "VALUES" TupleList,
};

SelectMode: () = {
    "ALL",
    "DISTINCT",
};

TupleList: () = {
    Tuple,
    TupleList "," Tuple,
};

Tuple: () = {
    "(" ExpressionList ")",
};

ResultColumnList: () = {
    ResultColumn,
    ResultColumnList "," ResultColumn,
};

ResultColumn: () = {
    Expression ("AS"? Identifier)?,
    "*",
    Identifier "." "*",
};

QualifiedIdentifier: Vec<String> = {
    Identifier => vec![<>],
    <i1:Identifier> "." <i2:Identifier> => vec![i1, i2],
    <i1:Identifier> "." <i2:Identifier> "." <i3:Identifier> => vec![i1, i2, i3],
};

FromClause: () = {
    "FROM" JoinClause,
};

JoinClause: () = {
    TableOrSubQuery,
    JoinClause "," TableOrSubQuery,
    JoinClause JoinOperator TableOrSubQuery JoinConstraint,

};

TableOrSubQueryList: () = {
    TableOrSubQuery,
    TableOrSubQueryList "," TableOrSubQuery,
};

TableOrSubQuery: () = {
    QualifiedIdentifier TableAlias? IndexClause?,
    "(" SelectStatement ")" TableAlias?,
    "(" JoinClause ")",
};

TableAlias: () = {
    "AS"? Identifier,
};

IndexClause: () = {
    "INDEXED" "BY" Identifier,
    "NOT" "INDEXED",
};

JoinOperator: () = {
    "NATURAL"? JoinType? "JOIN",
};

JoinType: () = {
    "LEFT" "OUTER"?,
    "INNER",
    "CROSS",
};

JoinConstraint: () = {
    "ON" Expression,
    "USING" "(" IdentifierList ")",
};

IdentifierList: () = {
    Identifier,
    IdentifierList "," Identifier,
};

WhereClause: () = {
    "WHERE" Expression,
};

GroupByClause: () = {
    "GROUP" "BY" ExpressionList,
    "GROUP" "BY" ExpressionList "HAVING" Expression,
};

OrderByClause: () = {
    "ORDER" "BY" OrderingTermList,
};

OrderingTermList: () = {
    OrderingTerm,
    OrderingTermList "," OrderingTerm,
};

OrderingTerm: () = {
    Expression OrderingCollation? OrderingDirection?,
};

OrderingCollation: () = {
    "COLLATE" Identifier,
};

OrderingDirection: () = {
    "ASC",
    "DESC",
};

LimitClause: () = {
    "LIMIT" Expression,
    "LIMIT" Expression "," Expression,
    "LIMIT" Expression "OFFSET" Expression,
};

ExpressionList: Vec<Box<ast::Expression>> = {
    Expression => vec![<>],
    <exprs:ExpressionList> "," <expr:Expression> => {
        let mut result = exprs;
        result.push(expr);
        result
    },
};

PrimaryExpression: Box<ast::Expression> = {
    "(" <exprs:ExpressionList> ")" => {
        if exprs.len() == 1 {
            let mut copy = exprs;
            copy.remove(0)
        } else {
            Box::new(ast::Expression::MakeTuple(exprs))
        }
    },
    "(" <select:SelectStatement> ")" => Box::new(ast::Expression::Select(select)),
    LiteralValue => Box::new(ast::Expression::Literal(<>)),
    QualifiedIdentifier => Box::new(ast::Expression::QualifiedIdentifier(<>)),
};

UnaryExpression: Box<ast::Expression> = {
    PrimaryExpression,
    "+" <expr:UnaryExpression> => expr,
    "-" <expr:UnaryExpression> => Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Negate, expr }),
};

MultiplicativeExpression: Box<ast::Expression> = {
    UnaryExpression,
    <left:MultiplicativeExpression> "*" <right:UnaryExpression> =>
        Box::new(ast::Expression::Binary { op: ast::BinaryOperator::Multiply, left, right }),
    <left:MultiplicativeExpression> "/" <right:UnaryExpression> =>
        Box::new(ast::Expression::Binary { op: ast::BinaryOperator::Divide, left, right }),
};

AdditiveExpression: Box<ast::Expression> = {
    MultiplicativeExpression,
    <left:AdditiveExpression> "+" <right:MultiplicativeExpression> =>
        Box::new(ast::Expression::Binary { op: ast::BinaryOperator::Add, left, right }),
    <left:AdditiveExpression> "-" <right:MultiplicativeExpression> =>
        Box::new(ast::Expression::Binary { op: ast::BinaryOperator::Subtract, left, right }),
    <left:AdditiveExpression> "||" <right:MultiplicativeExpression> =>
        Box::new(ast::Expression::Binary { op: ast::BinaryOperator::Concat, left, right }),
};

ComparativeExpression: Box<ast::Expression> = {
    AdditiveExpression,
    <left:ComparativeExpression> "=" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::Equal, left, right }),
    <left:ComparativeExpression> "!=" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::NotEqual, left, right }),
    <left:ComparativeExpression> "<" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::LessThan, left, right }),
    <left:ComparativeExpression> ">" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::GreaterThan, left, right }),
    <left:ComparativeExpression> "<=" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::LessEqual, left, right }),
    <left:ComparativeExpression> ">=" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::GreaterEqual, left, right }),
    <left:ComparativeExpression> "IS" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::Is, left, right }),
    <left:ComparativeExpression> "IS" "NOT" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::IsNot, left, right }),
    <left:ComparativeExpression> "LIKE" <right:AdditiveExpression> =>
        Box::new(ast::Expression::Comparison { op: ast::ComparisonOperator::Like, left, right }),

    <expr:ComparativeExpression> "ISNULL" =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::IsNull, expr }),
    <expr:ComparativeExpression> "NOTNULL" =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not,
                 expr: Box::new(ast::Expression::Unary { op: ast::UnaryOperator::IsNull, expr }) }),
    <expr:ComparativeExpression> "NOT" "NULL" =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not,
                 expr: Box::new(ast::Expression::Unary { op: ast::UnaryOperator::IsNull, expr }) }),

    <expr:ComparativeExpression> "IN" "("  ")" =>
        Box::new(ast::Expression::In { expr, set: ast::SetSpecification::List(Vec::new()) }),
    <expr:ComparativeExpression> "NOT" "IN" "("  ")" =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not,        
            expr: Box::new(ast::Expression::In { expr, set: ast::SetSpecification::List(Vec::new()) }) }),

    <expr:ComparativeExpression> "IN" "(" <exprs:ExpressionList> ")" =>
        Box::new(ast::Expression::In { expr, set: ast::SetSpecification::List(exprs) }),
    <expr:ComparativeExpression> "NOT" "IN" "(" <exprs:ExpressionList> ")" =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not,        
            expr: Box::new(ast::Expression::In { expr, set: ast::SetSpecification::List(exprs) }) }),

    <expr:ComparativeExpression> "IN" "(" <select:SelectStatement> ")" =>
        Box::new(ast::Expression::In { expr, set: ast::SetSpecification::Select(select)} ),
    <expr:ComparativeExpression> "NOT" "IN" "(" <select:SelectStatement> ")" =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not,        
            expr: Box::new(ast::Expression::In { expr, set: ast::SetSpecification::Select(select) }) }),

    <expr:ComparativeExpression> "IN" <name:QualifiedIdentifier> =>
        Box::new(ast::Expression::In { expr, set: ast::SetSpecification::Name(name) }),
    <expr:ComparativeExpression> "NOT" "IN" <name:QualifiedIdentifier> =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not,        
            expr: Box::new(ast::Expression::In { expr, set: ast::SetSpecification::Name(name) }) }),

    <expr:ComparativeExpression> "BETWEEN" <lower:AdditiveExpression> "AND" <upper:AdditiveExpression> =>
        Box::new(ast::Expression::Between { expr, lower, upper }),
    <expr:ComparativeExpression> "NOT" "BETWEEN" <lower:AdditiveExpression> "AND" <upper:AdditiveExpression> =>
        Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not,
            expr: Box::new(ast::Expression::Between { expr, lower, upper }) }),
};

ComplexExpression: Box<ast::Expression> = {
    ComparativeExpression,
    CaseExpression,
};

CaseExpression: Box<ast::Expression> = {
    "CASE" <expr:Expression> <when_part:WhenClause+> <else_part:ElseClause?> "END" =>
        Box::new(ast::Expression::Case { expr, when_part, else_part }),
};

WhenClause: ast::WhenClause = {
    "WHEN" <when:Expression> "THEN" <then:Expression> => ast::WhenClause { guard: when, body:then},
};

ElseClause: Box<ast::Expression> = {
    "ELSE" <expr:Expression> => expr,
};

NotExpression: Box<ast::Expression> = {
    ComplexExpression,
    "NOT" <expr:ComplexExpression> => Box::new(ast::Expression::Unary { op: ast::UnaryOperator::Not, expr }),
};

AndExpression: Box<ast::Expression> = {
    NotExpression,
    <left:AndExpression> "AND" <right:NotExpression> =>
        Box::new(ast::Expression::Binary { op: ast::BinaryOperator::And, left, right }),
};

OrExpression: Box<ast::Expression> = {
    AndExpression,
    <left:OrExpression> "OR" <right:AndExpression> =>
        Box::new(ast::Expression::Binary { op: ast::BinaryOperator::Or, left, right }),
};

Expression: Box<ast::Expression> = {
    OrExpression,
};

LiteralValue: ast::Literal = {
    NumericLiteral => ast::Literal::NumericLiteral(<>),
    StringLiteral => ast::Literal::StringLiteral(<>),
    "NULL" => ast::Literal::Null,
    "CURRENT_TIME" => ast::Literal::CurrentTime,
    "CURRENT_DATE" => ast::Literal::CurrentDate,
    "CURRENT_TIMESTAMP" => ast::Literal::CurrentTimestamp,
};

Identifier: String = r"[A-Za-z_][A-Za-z0-9_]*" => <>.to_string();

NumericLiteral: String = {
    r"[0-9]+(\.[0-9]*)?(E[+-]?[0-9]+)?" => <>.to_string(),
    r"\.[0-9]+(E[+-]?[0-9]+)?" => <>.to_string(),
    r"0x[0-9A-Fa-f]+" => <>.to_string(),
};

StringLiteral: String = r"'[^[[:cntrl:]]']*'" => <>[1..<>.len() - 1].to_string();